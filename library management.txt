#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Book {
    int id;
    char title[100];
    char author[100];
    struct Book* prev;
    struct Book* next;
} Book;

Book* head = NULL;

// Create a new book node
Book* createBook(int id, char title[], char author[]) {
    Book* newBook = (Book*)malloc(sizeof(Book));
    newBook->id = id;
    strcpy(newBook->title, title);
    strcpy(newBook->author, author);
    newBook->prev = NULL;
    newBook->next = NULL;
    return newBook;
}

// Add book at the end
void addBook(int id, char title[], char author[]) {
    Book* newBook = createBook(id, title, author);
    if (head == NULL) {
        head = newBook;
    } else {
        Book* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newBook;
        newBook->prev = temp;
    }
    printf("Book added successfully!\n");
}

// Delete book by ID
void deleteBook(int id) {
    Book* temp = head;
    while (temp != NULL && temp->id != id)
        temp = temp->next;

    if (temp == NULL) {
        printf("Book with ID %d not found.\n", id);
        return;
    }

    if (temp->prev)
        temp->prev->next = temp->next;
    else
        head = temp->next;

    if (temp->next)
        temp->next->prev = temp->prev;

    free(temp);
    printf("Book deleted successfully!\n");
}

// Search book by ID
void searchBook(int id) {
    Book* temp = head;
    while (temp != NULL) {
        if (temp->id == id) {
            printf("Book found:\nID: %d\nTitle: %s\nAuthor: %s\n", temp->id, temp->title, temp->author);
            return;
        }
        temp = temp->next;
    }
    printf("Book not found.\n");
}

// Check availability
void checkAvailability(int id) {
    Book* temp = head;
    while (temp != NULL) {
        if (temp->id == id) {
            printf("Book with ID %d is available.\n", id);
            return;
        }
        temp = temp->next;
    }
    printf("Book with ID %d is not available.\n", id);
}

// Display all books forward
void displayForward() {
    Book* temp = head;
    if (temp == NULL) {
        printf("Library is empty.\n");
        return;
    }
    printf("Books in Library (Forward):\n");
    while (temp != NULL) {
        printf("ID: %d | Title: %s | Author: %s\n", temp->id, temp->title, temp->author);
        temp = temp->next;
    }
}

// Display all books backward
void displayBackward() {
    Book* temp = head;
    if (temp == NULL) {
        printf("Library is empty.\n");
        return;
    }

    while (temp->next != NULL)
        temp = temp->next;

    printf("Books in Library (Backward):\n");
    while (temp != NULL) {
        printf("ID: %d | Title: %s | Author: %s\n", temp->id, temp->title, temp->author);
        temp = temp->prev;
    }
}

// Menu
int main() {
    int choice, id;
    char title[100], author[100];

    while (1) {
        printf("\n--- Library Management System ---\n");
        printf("1. Add Book\n");
        printf("2. Delete Book\n");
        printf("3. Search Book\n");
        printf("4. Check Availability\n");
        printf("5. Display Books Forward\n");
        printf("6. Display Books Backward\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // clear input buffer

        switch (choice) {
            case 1:
                printf("Enter Book ID: ");
                scanf("%d", &id);
                getchar();
                printf("Enter Title: ");
                fgets(title, 100, stdin);
                title[strcspn(title, "\n")] = 0; // remove newline
                printf("Enter Author: ");
                fgets(author, 100, stdin);
                author[strcspn(author, "\n")] = 0;
                addBook(id, title, author);
                break;

            case 2:
                printf("Enter Book ID to delete: ");
                scanf("%d", &id);
                deleteBook(id);
                break;

            case 3:
                printf("Enter Book ID to search: ");
                scanf("%d", &id);
                searchBook(id);
                break;

            case 4:
                printf("Enter Book ID to check: ");
                scanf("%d", &id);
                checkAvailability(id);
                break;

            case 5:
                displayForward();
                break;

            case 6:
                displayBackward();
                break;

            case 7:
                printf("Exiting...\n");
                return 0;

            default:
                printf("Invalid choice. Try again.\n");
        }
    }
}
